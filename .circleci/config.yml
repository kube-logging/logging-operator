# Golang CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-go/ for more details
version: 2.1

orbs:
  helm: banzaicloud/helm@0.0.8
  docker: circleci/docker@2.1.1

executors:
  helm311:
    docker:
      - image: ghcr.io/banzaicloud/helm:0.0.7

jobs:
  build:
    docker:
      - image: cimg/go:1.17
        environment:
          GOFLAGS: -mod=readonly

    steps:
      - checkout

      - run:
          name: Check generators for unwanted diffs
          command: |
            make check-diff

      - run:
          name: Run lint
          command: make lint
          environment:
            LINTER_FLAGS: '--timeout 5m'

      - run:
          name: Run tests
          command: |
            make test

  e2e-test:
    machine:
      image: ubuntu-2004:202201-02
      docker_layer_caching: true
    environment:
      GO_VERSION: '1.13'
      K8S_VERSION: 'v1.17.17'
      VAULT_VERSION: '1.0.0'
      KUBECONFIG: '/home/circleci/.kube/config'
      GOPATH: '/home/circleci/go'
    steps:
      - checkout

      - run:
          name: Setup Kind
          command: |
            curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.14.0/kind-linux-amd64
            chmod +x ./kind
            sudo mv ./kind /usr/local/bin/kind

      - run:
          name: Setup kubectl
          command: |
            curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/${K8S_VERSION}/bin/linux/amd64/kubectl \
            && chmod +x kubectl \
            && sudo mv kubectl /usr/local/bin/

            mkdir -p ${HOME}/.kube
            touch ${HOME}/.kube/config

      - run:
          name: Create Kind cluster
          command: |
            kind create cluster --image kindest/node:${K8S_VERSION}

      - run:
          name: Create go directory
          command: |
            sudo mkdir /go
            sudo chmod 777 /go

      - run:
          name: Setup golang
          command: |
            sudo rm -rf /usr/local/go
            curl \
              -Lo go.linux-amd64.tar.gz \
              "https://dl.google.com/go/go${GO_VERSION}.linux-amd64.tar.gz" \
            && sudo tar -C /usr/local -xzf go.linux-amd64.tar.gz
            echo 'export PATH="$GOPATH/bin:$PATH"' >> "${BASH_ENV}"
            rm go.linux-amd64.tar.gz

      - run:
          name: Build docker image
          command: |
            make docker-build IMG='controller:local'

      - run:
          name: Build e2e fluentd docker image
          command: |
            make docker-build-e2e-fluentd IMG='fluentd:local'

      - run:
          name: Wait for minikube
          command: |
            timeout 180s bash \<<EOT
              set -o pipefail
              function is_ready()
              {
                kubectl get nodes -o json \
                  | jq '.items[].status.conditions[] | select(.type=="Ready" and .status=="True")'
              }

              until is_ready
              do
                sleep 1
              done
            EOT

      - run:
          name: Setup helm
          command: |
            bash <(curl -L https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3) -v v3.4.2

      - run:
          name: Create logging namespace
          command: |
            kubectl create namespace logging

      - run:
          name: Start Minio
          command: |
            kubectl create -f hack/minio.yaml
            kubectl wait --namespace logging --for=condition=available deployment/minio-deployment --timeout=120s
            minio="$(kubectl get pod --namespace logging -l app=minio -o 'jsonpath={.items[0].metadata.name}')"
            kubectl wait --namespace logging --for=condition=Ready pod "${minio}" --timeout=120s

      - run:
          name: Setup minio cli
          command: |
            kubectl create -f hack/minio-mc.yaml
            kubectl wait --namespace logging --for=condition=available deployment/minio-mc-deployment --timeout=120s
            mc_pod="$(kubectl get pod --namespace logging -l app=minio-mc -o 'jsonpath={.items[0].metadata.name}')"
            kubectl wait --namespace logging --for=condition=Ready pod "${mc_pod}" --timeout=120s
            kubectl exec --namespace logging "${mc_pod}" -- \
              mc config host add minio \
                'http://minio-service.logging.svc.cluster.local:9000' \
                'minio_access_key' \
                'minio_secret_key'

      - run:
          name: Test
          command: |
            hack/test.sh

  docker-release:
    executor:
      name: docker/machine
      dlc: true
    parameters:
      tag:
        default: $CIRCLE_SHA1
        description: 'Image tag'
        type: string
      extra_build_args:
        default: ''
        description: >
          Extra flags to pass to docker build. For examples, see https://docs.docker.com/engine/reference/commandline/build
        type: string
      image:
        description: Name of image to build
        type: string
      registry:
        default: docker.io
        description:
          Name of registry to use, defaults to docker.io
        type: string
    steps:
      - checkout
      - docker/check
      - docker/build:
          extra_build_args: <<parameters.extra_build_args>>
          registry: <<parameters.registry>>
          image: <<parameters.image>>
          tag: $CIRCLE_SHA1
      - run:
          name: Tag release
          command: |
            docker tag <<parameters.image>>:$CIRCLE_SHA1 <<parameters.registry>>/<<parameters.image>>:<<parameters.tag>>
      - docker/push:
          registry: <<parameters.registry>>
          image: <<parameters.image>>
          tag: <<parameters.tag>>
      - run:
          name: Check version
          command: |
            if ! echo "${CIRCLE_TAG}" | grep -Eq '^[0-9]+\.[0-9]+\.[0-9]+$'; then
              echo 'Unstable version. Skipping further steps.'
              circleci step halt
            fi
      - run:
          name: Tag latest
          command: |
            docker tag <<parameters.image>>:$CIRCLE_SHA1 <<parameters.registry>>/<<parameters.image>>:latest
      - docker/push:
          registry: <<parameters.registry>>
          image: <<parameters.image>>
          tag: latest

  trigger-docs-update:
    docker:
      - image: cimg/base:stable
    resource_class: small
    steps:
      - checkout
      - run:
          name: Trigger
          command: scripts/trigger-docs-update.sh "${CIRCLE_TAG}"

workflows:
  version: 2
  build:
    jobs:
      - build
      - e2e-test:
          requires:
            - build
      - docker/publish:
          name: Publish master docker image
          executor:
            name: docker/machine
            dlc: true
          context: dockerhub
          deploy: true
          image: banzaicloud/logging-operator
          tag: master
          requires:
            - e2e-test
          filters:
            branches:
              only: master
      - docker-release:
          name: Publish tagged & latest docker image
          context: dockerhub
          image: banzaicloud/logging-operator
          tag: $CIRCLE_TAG
          filters:
            tags:
              only: /^[0-9]+\.[0-9]+\.[0-9]+(?:-(?:dev|rc)\.[0-9]+)?$/
            branches:
              ignore: /.*/
      - trigger-docs-update:
          filters:
            tags:
              only: /^[0-9]+\.[0-9]+\.[0-9]+$/
            branches:
              ignore: /.*/

  helm-chart:
    jobs:
      - helm/lint-chart:
          executor: helm311
          filters:
            tags:
              ignore: /.*/

      - helm/publish-chart:
          context: helm
          executor: helm311
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /chart\/.*\/\d+.\d+.\d+.*/
