name: Artifacts

on:
  workflow_call:
    inputs:
      version:
        description: Version to build
        default: latest
        required: true
        type: string
      publish:
        description: Publish artifacts to the artifact store
        default: false
        required: false
        type: boolean
      release:
        description: Whether this is a release build
        default: false
        required: false
        type: boolean
    outputs:
      container-image-name:
        description: Container image name
        value: ${{ jobs.container-image.outputs.name }}
      container-image-digest:
        description: Container image digest
        value: ${{ jobs.container-image.outputs.digest }}
      container-image-tag:
        description: Container image tag
        value: ${{ jobs.container-image.outputs.tag }}
      helm-chart-name:
        description: Helm chart OCI name
        value: ${{ jobs.helm-chart.outputs.name }}
      helm-chart-tag:
        description: Helm chart tag
        value: ${{ jobs.helm-chart.outputs.tag }}
      helm-chart-package:
        description: Helm chart package name
        value: ${{ jobs.helm-chart.outputs.package }}
      subchart-name:
        description: CRD subchart OCI name
        value: ${{ jobs.crd-subchart.outputs.name }}
      subchart-tag:
        description: CRD subchart tag
        value: ${{ jobs.crd-subchart.outputs.tag }}
      subchart-package:
        description: CRD subchart package name
        value: ${{ jobs.crd-subchart.outputs.package }}

permissions:
  contents: read

jobs:
  container-image:
    name: Container image
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      id-token: write
      security-events: write

    outputs:
      name: ${{ steps.image-name.outputs.value }}
      digest: ${{ steps.build.outputs.digest }}
      tag: ${{ steps.meta.outputs.version }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3.6.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

      - name: Set up Cosign
        uses: sigstore/cosign-installer@d7543c93d881b35a8faa02e8e3605f69b7a1ce62 # v3.10.0
        if: ${{ inputs.publish }}

      - name: Set image name
        id: image-name
        run: echo "value=ghcr.io/${{ github.repository }}" >> "$GITHUB_OUTPUT"

      - name: Gather build metadata
        id: meta
        uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5.8.0
        with:
          images: ${{ steps.image-name.outputs.value }}
          flavor: |
            latest = false
          tags: |
            type=ref,event=branch
            type=ref,event=pr,prefix=pr-
            type=semver,pattern={{raw}}
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.description=The Logging operator solves your logging-related problems in Kubernetes environments by automating the deployment and configuration of a Kubernetes logging pipeline.
            org.opencontainers.image.title=Logging operator
            org.opencontainers.image.authors=Kube logging authors
            org.opencontainers.image.documentation=https://kube-logging.dev/docs/

      - name: Login to GitHub Container Registry
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3.6.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}
        if: ${{ inputs.publish }}

      - name: Build and push image
        id: build
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: GO_BUILD_FLAGS=-ldflags=-X=github.com/kube-logging/logging-operator/pkg/sdk/logging/api/v1beta1.Version=${{ inputs.version }}
          outputs: |
            type=image,push=${{ inputs.publish }},name=target,annotation-index.org.opencontainers.image.description=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.description'] }}
            type=oci,dest=image.tar,name=target,annotation-index.org.opencontainers.image.description=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.description'] }}

      - name: Sign image with GitHub OIDC Token
        if: ${{ inputs.publish && github.repository_owner == 'kube-logging' }} # Check if the workflow is called by the same GitHub organization
        env:
          DIGEST: ${{ steps.build.outputs.digest }}
          TAGS: ${{ steps.meta.outputs.tags }}
        run: |
          images=""
          for tag in ${TAGS[@]}; do
            images+="${tag}@${DIGEST} "
          done
          
          cosign sign --yes --rekor-url "https://rekor.sigstore.dev/" ${images}

      - name: Verify signed image with cosign
        if: ${{ inputs.publish && github.repository_owner == 'kube-logging' }} # Check if the workflow is called by the same GitHub organization
        env:
          DIGEST: ${{ steps.build.outputs.digest }}
          TAGS: ${{ steps.meta.outputs.tags }}
        run: |
          if [ "${{ github.repository }}" == "kube-logging/logging-operator" ]; then
            for tag in ${TAGS[@]}; do
              cosign verify "${tag}@${DIGEST}" \
                --rekor-url "https://rekor.sigstore.dev/" \
                --certificate-identity "https://github.com/${{ github.repository }}/.github/workflows/artifacts.yaml@${{ github.ref }}" \
                --certificate-oidc-issuer "https://token.actions.githubusercontent.com" | jq
            done
          else
            versions=$(curl -s https://api.github.com/repos/kube-logging/logging-operator/releases | jq -r '.[].tag_name')
            version_array=($versions)
            
            echo "Checking versions:"
            printf '%s\n' "${version_array[@]}"
            echo "-------------------"
            
            verification_succeeded=false
            for tag in ${TAGS[@]}; do
              echo "Checking tag: ${tag}"
              
              for version in "${version_array[@]}"; do
                [[ -z "$version" ]] && continue
                
                echo "Attempting verification with version ${version}"
                if cosign verify "${tag}@${DIGEST}" \
                    --rekor-url "https://rekor.sigstore.dev/" \
                    --certificate-identity "https://github.com/kube-logging/logging-operator/.github/workflows/artifacts.yaml@refs/tags/${version}" \
                    --certificate-oidc-issuer "https://token.actions.githubusercontent.com" > /dev/null 2>&1; then
                  echo "✓ Verification succeeded for ${tag} with version ${version}"
                  verification_succeeded=true
                  break
                else
                  echo "✗ Verification failed for version ${version}"
                fi
              done
              
              if ! $verification_succeeded; then
                echo "❌ No valid signature found for ${tag}"
                exit 1
              fi
            done
      
            if $verification_succeeded; then
              echo "✅ All verifications completed successfully"
            fi
          fi

      - name: Extract OCI tarball
        run: |
          mkdir -p image
          tar -xf image.tar -C image

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@b6643a29fecd7f34b3597bc6acb0a98b03d33ff8 # 0.33.1
        env:
          TRIVY_DB_REPOSITORY: public.ecr.aws/aquasecurity/trivy-db:2
          TRIVY_JAVA_DB_REPOSITORY: public.ecr.aws/aquasecurity/trivy-java-db:1
        with:
          input: image
          format: sarif
          output: trivy-results.sarif

      - name: Upload Trivy scan results as artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: "[${{ github.job }}] Trivy scan results"
          path: trivy-results.sarif
          retention-days: 5

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@3c3833e0f8c1c83d449a7478aa59c036a9165498 # v3.29.11
        with:
          sarif_file: trivy-results.sarif

  helm-chart:
    name: Helm chart
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      id-token: write
      security-events: write

    outputs:
      name: ${{ steps.oci-chart-name.outputs.value }}
      tag: ${{ steps.version.outputs.value }}
      package: ${{ steps.build.outputs.package }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Set up Helm
        uses: azure/setup-helm@1a275c3b69536ee54be43f2070a358922e12c8d4 # v4.3.1
        with:
          version: v3.19.0

      - name: Set up Cosign
        uses: sigstore/cosign-installer@d7543c93d881b35a8faa02e8e3605f69b7a1ce62 # v3.10.0
        if: inputs.publish && inputs.release

      - name: Set chart name
        id: chart-name
        run: echo "value=${{ github.event.repository.name }}" >> "$GITHUB_OUTPUT"

      - name: Set OCI registry name
        id: oci-registry-name
        run: echo "value=ghcr.io/${{ github.repository_owner }}/helm-charts" >> "$GITHUB_OUTPUT"

      - name: Set OCI chart name
        id: oci-chart-name
        run: echo "value=${{ steps.oci-registry-name.outputs.value }}/${{ steps.chart-name.outputs.value }}" >> "$GITHUB_OUTPUT"

      - name: Helm dependency update
        run: helm dependency update charts/${{ steps.chart-name.outputs.value }}

      - name: Helm lint
        run: helm lint charts/${{ steps.chart-name.outputs.value }}

      - name: Determine raw version
        uses: haya14busa/action-cond@94f77f7a80cd666cb3155084e428254fea4281fd # v1.2.1
        id: version
        with:
          cond: ${{ inputs.release }}
          if_true: ${{ github.ref_name }}
          if_false: 0.0.0

      - name: Helm package
        id: build
        run: |
          helm package charts/${{ steps.chart-name.outputs.value }} --version ${{ steps.version.outputs.value }} --app-version ${{ steps.version.outputs.value }}
          echo "package=${{ steps.chart-name.outputs.value }}-${{ steps.version.outputs.value }}.tgz" >> "$GITHUB_OUTPUT"

      - name: Upload chart as artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: "[${{ github.job }}] Helm chart"
          path: ${{ steps.build.outputs.package }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3.6.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}
        if: inputs.publish && inputs.release

      - name: Helm push
        id: push
        run: |
          helm push ${{ steps.build.outputs.package }} oci://${{ steps.oci-registry-name.outputs.value }} &> push-metadata.txt
          echo "digest=$(awk '/Digest: /{print $2}' push-metadata.txt)" >> "$GITHUB_OUTPUT"
        env:
          HELM_REGISTRY_CONFIG: ~/.docker/config.json
        if: inputs.publish && inputs.release

      - name: Sign chart with GitHub OIDC Token
        if: ${{ inputs.publish && inputs.release && github.repository_owner == 'kube-logging' }} # Check if the workflow is called by the same GitHub organization
        env:
          DIGEST: ${{ steps.push.outputs.digest }}
        run: cosign sign --yes --rekor-url "https://rekor.sigstore.dev/" "${{ steps.oci-chart-name.outputs.value }}@${DIGEST}"

      - name: Verify signed chart with cosign
        if: ${{ inputs.publish && inputs.release && github.repository_owner == 'kube-logging' }} # Check if the workflow is called by the same GitHub organization
        env:
          DIGEST: ${{ steps.push.outputs.digest }}
        run: |
          if [ "${{ github.repository }}" == "kube-logging/logging-operator" ]; then
            cosign verify "${{ steps.oci-chart-name.outputs.value }}@${DIGEST}" \
              --rekor-url "https://rekor.sigstore.dev/" \
              --certificate-identity "https://github.com/${{ github.repository }}/.github/workflows/artifacts.yaml@${{ github.ref }}" \
              --certificate-oidc-issuer "https://token.actions.githubusercontent.com" | jq
          else
            versions=$(curl -s https://api.github.com/repos/kube-logging/logging-operator/releases | jq -r '.[].tag_name')
            version_array=($versions)
            
            echo "Checking versions:"
            printf '%s\n' "${version_array[@]}"
            echo "-------------------"
            
            echo "Checking chart: ${{ steps.oci-chart-name.outputs.value }}"
            verification_succeeded=false
            for version in "${version_array[@]}"; do
              [[ -z "$version" ]] && continue
              
              echo "Attempting verification with version ${version}"
              if cosign verify "${{ steps.oci-chart-name.outputs.value }}@${DIGEST}" \
                  --rekor-url "https://rekor.sigstore.dev/" \
                  --certificate-identity "https://github.com/kube-logging/logging-operator/.github/workflows/artifacts.yaml@refs/tags/${version}" \
                  --certificate-oidc-issuer "https://token.actions.githubusercontent.com" > /dev/null 2>&1; then
                echo "✓ Verification succeeded with version ${version}"
                verification_succeeded=true
                break
              else
                echo "✗ Verification failed for version ${version}"
              fi
            done
            
            if ! $verification_succeeded; then
              echo "❌ No valid signature found for chart"
              exit 1
            else
              echo "✅ Chart verification completed successfully"
            fi
          fi

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@b6643a29fecd7f34b3597bc6acb0a98b03d33ff8 # 0.33.1
        env:
          TRIVY_DB_REPOSITORY: public.ecr.aws/aquasecurity/trivy-db:2
          TRIVY_JAVA_DB_REPOSITORY: public.ecr.aws/aquasecurity/trivy-java-db:1
        with:
          scan-type: config
          scan-ref: charts/${{ steps.chart-name.outputs.value }}
          format: sarif
          output: trivy-results.sarif

      - name: Upload Trivy scan results as artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: "[${{ github.job }}] Trivy scan results"
          path: trivy-results.sarif
          retention-days: 5

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@3c3833e0f8c1c83d449a7478aa59c036a9165498 # v3.29.11
        with:
          sarif_file: trivy-results.sarif

  crd-subchart:
    if: github.repository == 'kube-logging/logging-operator'
    name: CRD subchart
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      id-token: write
      security-events: write

    outputs:
      name: ${{ steps.oci-chart-name.outputs.value }}
      tag: ${{ steps.version.outputs.value }}
      package: ${{ steps.build.outputs.package }}

    env:
      subchartPath: logging-operator/charts/logging-operator-crds
      subchartName: logging-operator-crds

    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Set up Helm
        uses: azure/setup-helm@1a275c3b69536ee54be43f2070a358922e12c8d4 # v4.3.1
        with:
          version: v3.19.0

      - name: Set up Cosign
        uses: sigstore/cosign-installer@d7543c93d881b35a8faa02e8e3605f69b7a1ce62 # v3.10.0
        if: inputs.publish && inputs.release

      - name: Set chart name
        id: chart-name
        run: echo "value=${{ github.event.repository.name }}/${{ env.subchartName }}" >> "$GITHUB_OUTPUT"

      - name: Set OCI registry name
        id: oci-registry-name
        run: echo "value=ghcr.io/${{ github.repository_owner }}/helm-charts" >> "$GITHUB_OUTPUT"

      - name: Set OCI chart name
        id: oci-chart-name
        run: echo "value=${{ steps.oci-registry-name.outputs.value }}/${{ steps.chart-name.outputs.value }}" >> "$GITHUB_OUTPUT"

      - name: Helm lint
        run: helm lint charts/${{ env.subchartPath }}

      - name: Determine raw version
        uses: haya14busa/action-cond@94f77f7a80cd666cb3155084e428254fea4281fd # v1.2.1
        id: version
        with:
          cond: ${{ inputs.release }}
          if_true: ${{ github.ref_name }}
          if_false: 0.0.0

      - name: Helm package
        id: build
        run: |
          helm package charts/${{ env.subchartPath }} --version ${{ steps.version.outputs.value }} --app-version ${{ steps.version.outputs.value }}
          echo "package=${{ github.workspace }}/${{ env.subchartName }}-${{ steps.version.outputs.value }}.tgz" >> "$GITHUB_OUTPUT"

      - name: Upload chart as artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: "[${{ github.job }}] Helm chart"
          path: ${{ steps.build.outputs.package }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@465a07811f14bebb1938fbed4728c6a1ff8901fc # v2.2.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}
        if: inputs.publish && inputs.release

      - name: Helm push
        id: push
        run: |
          helm push ${{ steps.build.outputs.package }} oci://${{ steps.oci-registry-name.outputs.value }}/${{ github.event.repository.name }} &> push-metadata.txt
          echo "digest=$(awk '/Digest: /{print $2}' push-metadata.txt)" >> "$GITHUB_OUTPUT"
        env:
          HELM_REGISTRY_CONFIG: ~/.docker/config.json
        if: inputs.publish && inputs.release

      - name: Sign chart with GitHub OIDC Token
        if: ${{ inputs.publish && inputs.release && github.repository_owner == 'kube-logging' }} # Check if the workflow is called by the same GitHub organization
        env:
          DIGEST: ${{ steps.push.outputs.digest }}
        run: cosign sign --yes --rekor-url "https://rekor.sigstore.dev/" "${{ steps.oci-chart-name.outputs.value }}@${DIGEST}"

      - name: Verify signed chart with cosign
        if: ${{ inputs.publish && inputs.release && github.repository_owner == 'kube-logging' }} # Check if the workflow is called by the same GitHub organization
        env:
          DIGEST: ${{ steps.push.outputs.digest }}
        run: |
          cosign verify "${{ steps.oci-chart-name.outputs.value }}@${DIGEST}" \
            --rekor-url "https://rekor.sigstore.dev/" \
            --certificate-identity "https://github.com/${{ github.repository }}/.github/workflows/artifacts.yaml@${{ github.ref }}" \
            --certificate-oidc-issuer "https://token.actions.githubusercontent.com" | jq

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@b6643a29fecd7f34b3597bc6acb0a98b03d33ff8 # 0.33.1
        env:
          TRIVY_DB_REPOSITORY: public.ecr.aws/aquasecurity/trivy-db:2
          TRIVY_JAVA_DB_REPOSITORY: public.ecr.aws/aquasecurity/trivy-java-db:1
        with:
          scan-type: config
          scan-ref: charts/${{ env.subchartPath }}
          format: sarif
          output: trivy-results.sarif

      - name: Upload Trivy scan results as artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: "[${{ github.job }}] Trivy scan results"
          path: trivy-results.sarif
          retention-days: 5

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@3c3833e0f8c1c83d449a7478aa59c036a9165498 # v3.29.11
        with:
          sarif_file: trivy-results.sarif
